git init
git add <file> 
	//-f 强制add
git status	
git diff
git diff HEAD -- readme.txt//查看工作区和版本库最新版本的区别
git commit -m <info>
	该操作之会把暂存区的修改提交

版本查询:
	git log //获取版本信息
	参数: --pretty=online 单行显示
	git log --graph --pretty=oneline --abbrev-commit//巨好看的版本路线

版本回溯:
	git reset --hard <版本号>
	HEAD:当前版本
	HEAD^:上一个版本
	HEAD^^:上上个版本
	以次类推:也可以 HEAD~num:表示上num个版本
//////////////////////////////////////////////////////
	文件撤销:
		git checkout -- <file>//返回到最近的一次git add 或者 git commit 时的状态
	切换分支:
		git checkout <branch>//切换到branch分支
		git checkout -b <new_branch>//新建一个分支,并且切换到该新分支
//------建议使用------//
		git switch -c <new_branch>//新建一个分支,并且切换过去
		git switch <branch>//切换到branch分支
	创建分支:
		git branch <new_branch> //创建一个新分支
	删除分支:
		git branch -d <exits_branch>
		git branch -D <exits_branch>//强制删除

///////////////////////////////////////////////////////
	git reset 可以回退版本，也可以把暂存区的修改撤销掉
		git reset HEAD <file>

工作现场:
	隐藏当前工作现场:git stash
	工作现场列表:git stash list
	恢复工作现场:
		git stash apply ,但不会删除列表,还需要 git stash drop
		git stash pop ,恢复的同时删除stash列表

git merge <branch>
	合并branch分支到当前分支

	--no-ff:不启用fast-forward
	使用例子:
		git merge --no-ff -m "这个参数会生成一个commit" <branch>
		//感觉就是完全覆写

git cherry-pick <commit>//不懂
指令的历史记录:
	git reflog //查询历史记录,至于是什么历史记录,自己看看就知道

版本库结构:
	file:///home/chenweida/git_learn/0.jpeg

git rm <file> //删除版本库的文件
/////////////////////////////////////////////////////////////


多人协作:
	git remote//查看远程库
	参数:
		-v 详细信息

	推送分支:
		git push origin master
				 远程分支 本地分支
	抓取分支:
		git clone git@github.xxxxxxxxxxxxxxxxxxxxxx//复制仓库
		git checkout -b dev origin/dev//将远程的dev分支创建到本地
		git pull //把最新的提交抓取下来//好难理解～～～
		git branch --set-upstream-to=origin/dev dev//指定远程的dev分支和与本地的dev链接

	整理分支:
		git rebase//不会

创建标签:
	git tag <tag_name>:给当前分支打上标签
	git tag <tag_name> <commit>:给指定commit打上标签
	git tag -a <tag_name> -m "info" <commit>:给指定commit打上带有标签信息的标签
删除标签:
	git tag -d <tag_name> //仅限于本地
	git push origin :refs/tags/<tagname>//可以删除一个远程标签。

	展示当前标签:git tag

展示标签的信息:
	git show <tag_name>
忽略文件:
	在根目录编写.gitignore
		eg:
			#Vim:
			*.swp
